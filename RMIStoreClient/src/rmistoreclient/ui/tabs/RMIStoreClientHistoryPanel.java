/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rmistoreclient.ui.tabs;

import java.rmi.RemoteException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import rmistore.commons.exceptions.Rejected;
import rmistore.commons.interfaces.Item;
import rmistore.commons.interfaces.Transaction;
import rmistoreclient.helper.RMIStoreClientHelper;
import rmistoreclient.interfaces.Callback;
import rmistoreclient.ui.tabs.items.RMIStoreClientTransactionItem;

/**
 *
 * @author davidsoendoro
 */
public class RMIStoreClientHistoryPanel extends RMIStoreClientGenericTab implements Callback {

    /**
     * Creates new form RMIStoreClientBuyPanel
     */
    public RMIStoreClientHistoryPanel() {
        tabName = "Transaction";
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelBalance = new javax.swing.JLabel();
        jLabelBalanceValue = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPaneBuy = new javax.swing.JScrollPane();
        jPanelBuy = new javax.swing.JPanel();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPaneSell = new javax.swing.JScrollPane();
        jPanelSell = new javax.swing.JPanel();
        jLabelSellTransactions = new javax.swing.JLabel();

        jLabelBalance.setText("Buy Transactions");

        jPanelBuy.setLayout(new java.awt.GridLayout(0, 1));
        jScrollPaneBuy.setViewportView(jPanelBuy);

        jPanelSell.setLayout(new java.awt.GridLayout(0, 1));
        jScrollPaneSell.setViewportView(jPanelSell);

        jLabelSellTransactions.setText("Sell Transactions");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneBuy, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelBalance)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelBalanceValue)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPaneSell, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelSellTransactions)
                        .addGap(281, 281, 281)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelBalance)
                    .addComponent(jLabelBalanceValue))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneBuy, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelSellTransactions)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneSell, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(62, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelBalance;
    private javax.swing.JLabel jLabelBalanceValue;
    private javax.swing.JLabel jLabelSellTransactions;
    private javax.swing.JPanel jPanelBuy;
    private javax.swing.JPanel jPanelSell;
    private javax.swing.JScrollPane jScrollPaneBuy;
    private javax.swing.JScrollPane jScrollPaneSell;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    // End of variables declaration//GEN-END:variables

    public void refreshHistory() {
        try {
            RMIStoreClientHelper.customerRemoteObj.callback = this;
            RMIStoreClientHelper.customerRemoteObj.getUserTransactions();
        } catch (RemoteException | Rejected ex) {
            Logger.getLogger(RMIStoreClientHistoryPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void doCallback(Object arguments) {
        System.out.println(arguments.getClass());
        if(arguments != null && arguments.getClass() == Double.class) {
            DecimalFormat df = new DecimalFormat("#.00");
            jLabelBalanceValue.setText(" $" + df.format(arguments));
        }
        else if(arguments != null && arguments.getClass() == String.class) {
            String argumentsString = (String) arguments;
            if(argumentsString.equals("deposit")) {
                refreshHistory();
            }
            else if(argumentsString.equals("withdraw")) {
                refreshHistory();
            }
        }
        else if(arguments != null && arguments.getClass() == ArrayList.class) {
            ArrayList<Transaction> transactions = (ArrayList<Transaction>) arguments;
            
            jPanelBuy.removeAll();
            jPanelSell.removeAll();
            for(Transaction transaction : transactions) {
                if(transaction.isIsBuy()) {
                    jPanelBuy.add(new RMIStoreClientTransactionItem(transaction));                
                }
                else {
                    jPanelSell.add(new RMIStoreClientTransactionItem(transaction));                
                }
            }
            
            jPanelBuy.revalidate();
            jPanelBuy.repaint();
            jPanelSell.revalidate();
            jPanelSell.repaint();
        }
    }
}
